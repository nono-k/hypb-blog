---
import type { CollectionEntry } from "astro:content";
import type { Page } from  "astro";

interface Props {
  page: Page<CollectionEntry<"articles">>;
}

const { page } = Astro.props as Props;

interface PaginationLink {
  page: number | string;
  url?: string;
}

const generatePaginationLinks = (
  page: Page<CollectionEntry<"articles">>
): PaginationLink[] => {
  const { currentPage, lastPage } = page;
  const range = 2;
  const links: PaginationLink[] = [];

  for (let i = 1; i <= lastPage; i++) {
    if (i === 1) {
      links.push({ page: i, url: `${page.url.current}` });
    } else if (
      i === lastPage ||
      (i >= currentPage - range && i <= currentPage + range)
    ) {
      links.push({ page: i, url: `${page.url.current}/${i}` });
    }  else if (links[links.length - 1]?.page !== "...") {
      links.push({ page: "..." });
    }
  }

  return links;
}
---
<nav class="pagination__nav">
  {
    page.currentPage > 1 && (
      <a href={page.url.prev} class="pagination prev"></a>
    )
  }

  {
    generatePaginationLinks(page).map((link) => (
      link.page === "..." ? (
        <span class="pagination dots">...</span>
      ) : (
        <a href={link.url} class:list={["pagination", link.page === page.currentPage ? "active" : ""]}>{link.page}</a>
      )
      )
    )
  }

  {
    page.currentPage < page.lastPage && (
      <a href={page.url.next} class="pagination next"></a>
    )
  }
</nav>

<style lang="scss">
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 3rem;
    height: 3rem;
    background: var(--gray-10);
    border-radius: 0.85rem;
    color: var(--black);
    font-size: 1.125rem;
    transition: background .3s;
    &.active {
      background: var(--yellow);
    }
    &.dots {
      pointer-events: none;
    }
    &.prev, &.next {
      &::before {
        content: '';
        width: 0.5rem;
        height: 0.5rem;
        border-right: 2px solid var(--black);
        border-bottom: 2px solid var(--black);
      }
    }
    &.prev {
      &::before {
        rotate: 135deg;
      }
    }
    &.next {
      &::before {
        rotate: -45deg;
      }
    }
    &__nav {
      display: flex;
      justify-content: center;
      gap: 1rem;
      @include mixin.large {
        grid-column: 2 / 3;
      }
    }
  }
  @media (hover: hover) {
    .pagination {
      &:hover {
        background: var(--yellow);
      }
    }
  }
</style>