---
import "katex/dist/katex.min.css";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

import Layout from "@/layouts/layout";
import ArticleContainer from "@/components/pages/article/article-container.astro";
import Sidebar from "@/components/sidebar.astro";
import '@fontsource/shippori-mincho/600.css';
import { category, tags } from "@/lib/constants";

import { compareDesc, format, formatISO } from 'date-fns';
import BatchCategory from "@/components/ui/batch-category.astro";
import ArticleBody from "@/components/pages/article/article-body.astro";
import PaginationBox from "@/components/pages/article/pagination-box.astro";
import AmazonLink from "@/components/pages/article/AmazonLink.astro";
import Figure from "@/components/markdown/Figure.astro";
import ShareCard from "@/components/pages/article/ShareCard.astro";
import Related from '@/components/pages/article/Related.astro';

interface Props {
  post: CollectionEntry<"articles">;
}

export async function getStaticPaths() {
  const articlePosts = await getCollection('articles');
  const nonDraftPosts = articlePosts.filter((post) => !post.data.draft);
  const sortedBlogPosts = nonDraftPosts.sort((a, b) => compareDesc(a.data.pubDate, b.data.pubDate));
  const numberOfPosts = nonDraftPosts.length;

  return sortedBlogPosts.map((post) => {
    const { slug } = post;
    const currentPage = sortedBlogPosts.findIndex((post) => post.slug === slug);
    const prev = currentPage + 1 >= numberOfPosts
      ? {}
      : { prevTitle: sortedBlogPosts[currentPage+1].data.title, prevImage: sortedBlogPosts[currentPage+1].data.image, prev: `/articles/${sortedBlogPosts[currentPage+1].slug}` };
    const next = currentPage - 1 < 0
      ? {}
      : { nextTitle: sortedBlogPosts[currentPage-1].data.title, nextImage: sortedBlogPosts[currentPage-1].data.image, next: `/articles/${sortedBlogPosts[currentPage-1].slug}` };
    return { params: {slug}, props: {post, url: {...prev, ...next}} };
  })
}

const { post, url } = Astro.props as { post: CollectionEntry<"articles">; url: Record<string, unknown> };
const { Content } = await post.render();

const {
  data: { title, pubDate, description, ogp, image, isAdLink, amazon, relatedPosts },
} = post;
const pubDateISO = formatISO(pubDate);
const pubDateJA = format(pubDate, 'yyyy.MM.dd');

const categoryName = post.data.category;
const tagsName = post.data.tags;

const categorySlug = category.find((cat) => cat.name === categoryName)?.slug;
---

<Layout pageTitle={title} description={description} articleOgp={ogp}>
  <div class="container">
    <ArticleContainer>
      <Sidebar blog />
      <div class="article">
        <header class="header">
          <a href={`/articles/category/${categorySlug}`}><BatchCategory text={categoryName} home/></a>
          <h1 class="title">{title}</h1>
          <div class="time">
            投稿日：
            <time datetime={pubDateISO}>{pubDateJA}</time>
          </div>
          <ul class="list">
            {tagsName.map((tag) => {
              const tagSlug = tags.find((item) => item.name === tag)?.slug;
              return (
                <li class="item">
                  <a href={`/articles/tag/${tagSlug}`}>   #{tag}
                  </a>
                </li>
              )
            })}
          </ul>
          <div class="thumbnail">
            <Image src={image} alt={title} width={1600} height={900} />
          </div>
          { isAdLink && (
            <div class="adLink-info">
              記事内に商品プロモーションを含む場合があります
            </div>
          )}
        </header>
        <ArticleBody>
          <Content components={{ img: Figure }} />
        </ArticleBody>

        { amazon ? <AmazonLink {...amazon} /> : ''}

        <ShareCard post={post} />

        <PaginationBox {...url} />

        { relatedPosts ? <Related relatedPosts={relatedPosts} /> : '' }
      </div>
    </ArticleContainer>
  </div>
</Layout>

<style lang="scss">
  .container {
    max-width: 1280px;
    margin-inline: auto;
    padding-inline: 2rem;
  }
  .article {
    min-width: 0;
    margin-left: clamp(0px, 1.5vw, 2rem);
  }
  .header {
    background: var(--gray-10);
    border-top-left-radius: 38px;
    border-top-right-radius: 38px;
    padding: 2.5rem;
  }
  .title {
    font-size: 2rem;
    margin-block: 0.5rem;
    font-family: 'Shippori Mincho', serif;
    font-weight: 600;
  }
  .time {
    font-size: 0.875rem;
    // margin-bottom: 0.5rem;
  }
  .list {
    display: flex;
    gap: 0.8rem;
    a {
      font-size: 0.875rem;
      color: var(--black);
    }
  }
  .adLink-info {
    background: linear-gradient(135deg,transparent 25%,rgba(0,0,0,.05) 25%,rgba(0,0,0,.05) 50%,transparent 50%,transparent 75%,rgba(0,0,0,.05) 75%,rgba(0,0,0,.05));
    background-size: 4px 4px;
    padding: 0.5rem 1rem;
    text-align: center;
    font-size: 0.75rem;
    margin-top: 1rem;
  }
  .thumbnail {
    margin-top: 1rem;
  }
  @include mixin.mobile {
    .article {
      width: 100%;
      margin-left: 0;
    }
  }
  @include mixin.phone {
    .container {
      padding-inline: 0;
    }
    .header {
      border-top-left-radius: 20px;
      border-top-right-radius: 20px;
      padding: 1.5rem 1rem;
    }
    .title {
      font-size: 1.25rem;
    }
  }
</style>